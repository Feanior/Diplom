#импортирование зависимостей import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt import seaborn as sns 
sns.set() 
from sklearn.metrics import r2_score, median_absolute_error, mean_absolute_error 
from sklearn.metrics import median_absolute_error, mean_squared_error, mean_squared_log_error 
from scipy.optimize import minimize 
import statsmodels.tsa.api as smt import statsmodels.api as sm 
from tqdm import tqdm_notebook from itertools import product 
def mean_absolute_percentage_error(y_true, y_pred): return np.mean(np.abs((y_true - y_pred) / y_true)) * 100 
import warnings warnings.filterwarnings('ignore') DATAPATH = 'data/stock_prices_sample.csv' 
data = pd.read_csv(DATAPATH, index_col=['DATE'], parse_dates=['DATE']) data.head(10) 
plt.figure(figsize=(17, 8)) plt.plot(data.CLOSE) 
plt.title('Closing price of New Germany Fund Inc (GF)') plt.ylabel('Closing price ($)') 
plt.xlabel('Trading day') 
plt.grid(False) plt.show() 
def plot_moving_average(series, window, plot_intervals=False, scale=1.96): rolling_mean = series.rolling(window=window).mean() 
plt.figure(figsize=(17,8)) 
plt.title('Moving average\n window size = {}'.format(window)) plt.plot(rolling_mean, 'g', label='Rolling mean trend') 
if plot_intervals: 
mae = mean_absolute_error(series[window:], rolling_mean[window:]) deviation = np.std(series[window:] - rolling_mean[window:]) lower_bound = rolling_mean - (mae + scale * deviation) 
upper_bound = rolling_mean + (mae + scale * deviation) plt.plot(upper_bound, 'r--', label='Upper bound / Lower bound') plt.plot(lower_bound, 'r--') 
plt.plot(series[window:], label='Actual values') plt.legend(loc='best') 
plt.grid(True) 
#скользящие средние для 5 дней plot_moving_average(data.CLOSE, 5) 
#скользящие средние для 30 дней plot_moving_average(data.CLOSE, 30) def exponential_smoothing(series, alpha): 
result = [series[0]] # first value is same as series for n in range(1, len(series)): 
result.append(alpha * series[n] + (1 - alpha) * result[n-1]) return result 
def plot_exponential_smoothing(series, alphas): plt.figure(figsize=(17, 8)) 
for alpha in alphas: 
plt.plot(exponential_smoothing(series, alpha), label="Alpha 
{}".format(alpha)) 
plt.plot(series.values, "c", label = "Actual") plt.legend(loc="best") 
plt.axis('tight') plt.title("Exponential Smoothing") plt.grid(True); 
plot_exponential_smoothing(data.CLOSE, [0.05, 0.3]) def tsplot(y, lags=None, figsize=(12, 7), style='bmh'): 
if not isinstance(y, pd.Series): y = pd.Series(y) 
with plt.style.context(style='bmh'): fig = plt.figure(figsize=figsize) layout = (2,2) 
ts_ax = plt.subplot2grid(layout, (0,0), colspan=2) acf_ax = plt.subplot2grid(layout, (1,0)) 
pacf_ax = plt.subplot2grid(layout, (1,1)) y.plot(ax=ts_ax) 
p_value = sm.tsa.stattools.adfuller(y)[1] ts_ax.set_title('Time Series Analysis Plots\n Dickey-Fuller: 
p={0:.5f}'.format(p_value)) smt.graphics.plot_acf(y, lags=lags, ax=acf_ax) 
smt.graphics.plot_pacf(y, lags=lags, ax=pacf_ax) plt.tight_layout() 
tsplot(data.CLOSE, lags=30) 
data_diff = data.CLOSE - data.CLOSE.shift(1) tsplot(data_diff[1:], lags=30) 
ps = range(0, 5) d = 1 
qs = range(0, 5) Ps = range(0, 5) D = 1 
Qs = range(0, 5) s = 5 
parameters = product(ps, qs, Ps, Qs) 
parameters_list = list(parameters) len(parameters_list) 
def optimize_SARIMA(parameters_list, d, D, s): results = [] 
best_aic = float('inf') 
for param in tqdm_notebook(parameters_list): 
try: model = sm.tsa.statespace.SARIMAX(data.CLOSE, order=(param[0], d, param[1]), 
seasonal_order=(param[2], D, param[3], 
s)).fit(disp=-1) 
except: 
continue 
aic = model.aic 
if aic < best_aic: best_model = model best_aic = aic best_param = param 
results.append([param, model.aic]) result_table = pd.DataFrame(results) 
result_table.columns = ['parameters', 'aic'] #Sort in ascending order, lower AIC is better result_table = result_table.sort_values(by='aic', 
ascending=True).reset_index(drop=True) return result_table 
result_table = optimize_SARIMA(parameters_list, d, D, s) p, q, P, Q = result_table.parameters[0] 
best_model = sm.tsa.statespace.SARIMAX(data.CLOSE, order=(p, d, q), 
seasonal_order=(P, D, Q, s)).fit(disp=-1) print(best_model.summary()) 
plt.figure(figsize=(17, 8)) plt.plot(comparison.actual) plt.plot(comparison.predicted) 
plt.title('Predicted closing price of New Germany Fund Inc (GF)') plt.ylabel('Closing price ($)') 
plt.xlabel('Trading day') plt.legend(loc='best') plt.grid(False) plt.show() 
